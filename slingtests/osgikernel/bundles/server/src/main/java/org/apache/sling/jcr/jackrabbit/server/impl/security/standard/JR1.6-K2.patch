Only in src/main/java/org/apache/sling/jcr/jackrabbit/server/impl/security/standard: 1cc7bd0bf5520e722987f90cf399045d90c083db-7d91628ee9f3bce0333f313fe5dffa092014a034.patch
diff -u -r /Users/ieb/Apache/jackrabbit/jackrabbit/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLEditor.java src/main/java/org/apache/sling/jcr/jackrabbit/server/impl/security/standard/ACLEditor.java
--- /Users/ieb/Apache/jackrabbit/jackrabbit/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLEditor.java	2009-12-03 06:42:56.000000000 +0000
+++ src/main/java/org/apache/sling/jcr/jackrabbit/server/impl/security/standard/ACLEditor.java	2009-12-05 16:07:31.000000000 +0000
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.jackrabbit.core.security.authorization.acl;
+package org.apache.sling.jcr.jackrabbit.server.impl.security.standard;
 
 import org.apache.jackrabbit.api.jsr283.security.AccessControlException;
 import org.apache.jackrabbit.api.jsr283.security.Privilege;
@@ -22,7 +22,7 @@
 import org.apache.jackrabbit.api.jsr283.security.AccessControlPolicy;
 import org.apache.jackrabbit.api.jsr283.security.AccessControlList;
 import org.apache.jackrabbit.core.NodeImpl;
-import org.apache.jackrabbit.core.ProtectedItemModifier;
+import org.apache.jackrabbit.core.DynamicProtectedItemModifier;
 import org.apache.jackrabbit.core.SessionImpl;
 import org.apache.jackrabbit.core.security.authorization.AccessControlConstants;
 import org.apache.jackrabbit.core.security.authorization.AccessControlEditor;
@@ -50,8 +50,11 @@
 
 /**
  * <code>ACLEditor</code>...
+ * NOTE DO NOT REFORMAT THIS CLASS AT ALL. IT USES JAVA STANDARD FORMATTING NOT SAKAI FORMATTING. IF YOU REFORMAT IT THIS LINE WILL WRAP AND IT WILL TAKE FOREVER TO UPGRADE.
+ * This Class is a direct copy of org.apache.jackrabbit.core.security.authorization.acl.ACLEditor the only change being it extends
+ * DynamicProtectedItemModifier.
  */
-public class ACLEditor extends ProtectedItemModifier implements AccessControlEditor, AccessControlConstants {
+public class ACLEditor extends DynamicProtectedItemModifier implements AccessControlEditor, AccessControlConstants {
 
     /**
      * the default logger
diff -u -r /Users/ieb/Apache/jackrabbit/jackrabbit/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLProvider.java src/main/java/org/apache/sling/jcr/jackrabbit/server/impl/security/standard/ACLProvider.java
--- /Users/ieb/Apache/jackrabbit/jackrabbit/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLProvider.java	2009-12-03 06:42:56.000000000 +0000
+++ src/main/java/org/apache/sling/jcr/jackrabbit/server/impl/security/standard/ACLProvider.java	2009-12-05 16:48:50.000000000 +0000
@@ -14,61 +14,69 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.jackrabbit.core.security.authorization.acl;
+package org.apache.sling.jcr.jackrabbit.server.impl.security.standard;
 
 import org.apache.jackrabbit.api.jsr283.security.AccessControlPolicy;
 import org.apache.jackrabbit.api.jsr283.security.Privilege;
 import org.apache.jackrabbit.api.jsr283.security.AccessControlList;
 import org.apache.jackrabbit.api.jsr283.security.AccessControlManager;
 import org.apache.jackrabbit.api.security.principal.PrincipalManager;
+import org.apache.jackrabbit.api.jsr283.security.AccessControlEntry;
+import org.apache.commons.collections.map.ListOrderedMap;
+import org.apache.jackrabbit.core.DynamicSecurityManager;
+import org.apache.jackrabbit.core.ItemImpl;
 import org.apache.jackrabbit.core.NodeId;
 import org.apache.jackrabbit.core.NodeImpl;
 import org.apache.jackrabbit.core.PropertyImpl;
-import org.apache.jackrabbit.core.ItemImpl;
+import org.apache.jackrabbit.core.RepositoryImpl;
 import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.config.SecurityManagerConfig;
 import org.apache.jackrabbit.core.observation.SynchronousEventListener;
+import org.apache.jackrabbit.core.security.AMContext;
 import org.apache.jackrabbit.core.security.SecurityConstants;
 import org.apache.jackrabbit.core.security.authorization.AbstractAccessControlProvider;
 import org.apache.jackrabbit.core.security.authorization.AbstractCompiledPermissions;
 import org.apache.jackrabbit.core.security.authorization.AccessControlConstants;
 import org.apache.jackrabbit.core.security.authorization.AccessControlEditor;
+import org.apache.jackrabbit.core.security.authorization.AccessControlEntryIterator;
 import org.apache.jackrabbit.core.security.authorization.AccessControlProvider;
 import org.apache.jackrabbit.core.security.authorization.CompiledPermissions;
 import org.apache.jackrabbit.core.security.authorization.Permission;
 import org.apache.jackrabbit.core.security.authorization.PrivilegeRegistry;
 import org.apache.jackrabbit.core.security.authorization.UnmodifiableAccessControlList;
-import org.apache.jackrabbit.core.security.authorization.AccessControlEntryIterator;
 import org.apache.jackrabbit.core.security.principal.PrincipalImpl;
 import org.apache.jackrabbit.spi.Path;
 import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
 import org.apache.jackrabbit.util.Text;
-import org.apache.commons.collections.map.ListOrderedMap;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.jcr.ItemNotFoundException;
+import javax.jcr.Node;
 import javax.jcr.NodeIterator;
 import javax.jcr.RepositoryException;
 import javax.jcr.Session;
 import javax.jcr.Value;
+import javax.jcr.ValueFactory;
 import javax.jcr.observation.Event;
 import javax.jcr.observation.EventIterator;
 import javax.jcr.observation.EventListener;
+import javax.jcr.observation.ObservationManager;
 import javax.jcr.query.Query;
 import javax.jcr.query.QueryManager;
 import java.security.Principal;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Arrays;
 
 /**
- * The ACLProvider generates access control policies out of the items stored
- * in the workspace applying the following rules:
+ * The ACLProvider generates access control policies out of the items stored in
+ * the workspace applying the following rules:
  * <ul>
  * <li>A <code>Node</code> is considered <i>access controlled</i> if an ACL has
  * been explicitely assigned to it by adding the mixin type
@@ -84,9 +92,16 @@
  * <li>an item is considered an <i>ACL item</i> if it is used to define an ACL.
  * ACL items inherit the ACL from node they defined the ACL for.</li>
  * </ul>
- *
+ * <p>
+ * This a modified version of the ACLProvider with a method to get the
+ * EntryCollector, intended to allow extension. This replaces the call to
+ * ACLTemplate.collectEntries()
+ * </p>
+ * 
  * @see AccessControlProvider for additional information.
  */
+// PLEASE DO NOT REFORMAT THIS CODE IF YOU DO THIS LINE WILL WRAP AND IT WILL MAKE FUTURE PATCHING VERY HARD, THANKS
+
 public class ACLProvider extends AbstractAccessControlProvider implements AccessControlConstants {
 
     /**
@@ -110,6 +125,12 @@
      */
     private boolean initializedWithDefaults;
 
+    private EntryCollector entryCollector;
+
+    private SessionImpl securitySession;
+
+    private ObservationManager securityObservationMgr;
+
     //-------------------------------------------------< AccessControlUtils >---
     /**
      * @see AbstractAccessControlProvider#isAcItem(Path)
@@ -143,12 +164,24 @@
         // make sure the workspace of the given systemSession has a
         // minimal protection on the root node.
         NodeImpl root = (NodeImpl) session.getRootNode();
+        RepositoryImpl repoImpl = (RepositoryImpl) session.getRepository();
+        SecurityManagerConfig smc = repoImpl.getConfig().getSecurityConfig()
+                .getSecurityManagerConfig();
+        String workspaceName = repoImpl.getConfig().getDefaultWorkspaceName();
+        if (smc != null && smc.getWorkspaceName() != null) {
+            workspaceName = smc.getWorkspaceName();
+        }
+        securitySession = (SessionImpl) repoImpl.login(workspaceName);
+        securityObservationMgr = securitySession.getWorkspace().getObservationManager();
+
         rootNodeId = root.getNodeId();
         systemEditor = new ACLEditor(systemSession, this);
         initializedWithDefaults = !configuration.containsKey(PARAM_OMIT_DEFAULT_PERMISSIONS);
         if (initializedWithDefaults && !isAccessControlled(root)) {
             initRootACL(session, systemEditor);
         }
+
+        entryCollector = new EntryCollectorImpl();
     }
 
     /**
@@ -193,7 +226,7 @@
         } else if (isReadOnly(principals)) {
             return getReadOnlyPermissions();
         } else {
-            return new AclPermissions(principals);
+            return new AclPermissions(principals, DynamicSecurityManager.getThreadBoundAMContext());
         }
     }
 
@@ -210,6 +243,16 @@
         }
     }
 
+    /**
+     * Get the configured collector, override this for extension and provide
+     * your own implementation.
+     * 
+     * @return
+     */
+    protected EntryCollector getEntryCollector() {
+        return entryCollector;
+    }
+
     //------------------------------------------------------------< private >---
 
     /**
@@ -329,7 +372,46 @@
      */
     private class AclPermissions extends AbstractCompiledPermissions implements SynchronousEventListener {
 
-        private final List principalNames;
+        private class PrincipalChangeListener implements SynchronousEventListener {
+
+            public PrincipalChangeListener() throws RepositoryException {
+                int events = Event.PROPERTY_CHANGED;
+                securityObservationMgr.addEventListener(this, events, "/", true, null, null, false);
+            }
+
+            public void onEvent(EventIterator events) {
+                while (events.hasNext()) {
+                    try {
+                        Event ev = events.nextEvent();
+                        String path = ev.getPath();
+                        PropertyImpl p = (PropertyImpl) securitySession.getProperty(path);
+                        NodeImpl parent = (NodeImpl) p.getParent();
+                        if (parent.isNodeType("rep:User") && userId != null
+                                && userId.equals(parent.getName())) {
+                            Value[] values = p.getValues();
+                            List<String> groups = new ArrayList<String>(values.length);
+                            for (Value value : values) {
+                                Node n = securitySession.getNodeByUUID(value.getString());
+                                log.info("Got node:" + n);
+                                groups.add(n.getName());
+                            }
+                            updatePrincipals(groups);
+                            break;
+                        }
+                    } catch (RepositoryException e) {
+                        log.warn("Internal error: ", e.getMessage());
+                    }
+                }
+            }
+
+            public void close() throws RepositoryException {
+                if (securityObservationMgr != null) {
+                    securityObservationMgr.removeEventListener(this);
+                }
+            }
+        }
+
+        private List principalNames;
         private final String jcrReadPrivilegeName;
 
         /**
@@ -337,9 +419,22 @@
          * -> simplify {@link #grants(Path, int)} in case of permissions == READ
          */
         private boolean readAllowed = false;
+        /**
+         * The user ID of the user that the AclPermissions are bound to.
+         */
+        private String userId;
+        /**
+         * A reference to the AccessManagerContext to allow us to refresh the
+         * list of principals
+         */
+        private PrincipalChangeListener principalEventListener;
 
-        private AclPermissions(Set principals) throws RepositoryException {
+        private AclPermissions(Set principals, AMContext amContext) throws RepositoryException {
             this(principals, true);
+            this.principalEventListener = new PrincipalChangeListener();
+            if (amContext != null) {
+                userId = amContext.getSession().getUserID();
+            }
         }
 
         private AclPermissions(Set principals, boolean listenToEvents) throws RepositoryException {
@@ -453,9 +548,10 @@
 
             boolean isAcItem = isAcItem(absPath);
 
+            ValueFactory valueFactory = session.getValueFactory();
             // retrieve all ACEs at path or at the direct ancestor of path that
             // apply for the principal names.
-            AccessControlEntryIterator entries = new Entries(getNode(node), principalNames).iterator();
+            AccessControlEntryIterator entries = new Entries(getNode(node), principalNames, userId, valueFactory).iterator();
             // build a list of ACEs that are defined locally at the node
             List localACEs;
             if (existingNode && isAccessControlled(node)) {
@@ -489,18 +585,22 @@
                 if (!isLocal) {
                     if (ace.isAllow()) {
                         parentAllows |= Permission.diff(entryBits, parentDenies);
+                        logState("NotLocalAllow ", ace, allows, denies, allowPrivileges, denyPrivileges, parentAllows, parentDenies);
                     } else {
                         parentDenies |= Permission.diff(entryBits, parentAllows);
+                        logState("NotLocalDeny ", ace, allows, denies, allowPrivileges, denyPrivileges, parentAllows, parentDenies);
                     }
                 }
                 if (ace.isAllow()) {
                     allowPrivileges |= Permission.diff(entryBits, denyPrivileges);
                     int permissions = PrivilegeRegistry.calculatePermissions(allowPrivileges, parentAllows, true, isAcItem);
                     allows |= Permission.diff(permissions, denies);
+                    logState("LocalAllow ", ace, allows, denies, allowPrivileges, denyPrivileges, parentAllows, parentDenies);
                 } else {
                     denyPrivileges |= Permission.diff(entryBits, allowPrivileges);
                     int permissions = PrivilegeRegistry.calculatePermissions(denyPrivileges, parentDenies, false, isAcItem);
                     denies |= Permission.diff(permissions, allows);
+                    logState("LocalDeny ", ace, allows, denies, allowPrivileges, denyPrivileges, parentAllows, parentDenies);
                 }
             }
             return new Result(allows, denies, allowPrivileges, denyPrivileges);
@@ -513,6 +613,7 @@
         public void close() {
             try {
                 observationMgr.removeEventListener(this);
+                principalEventListener.close();
             } catch (RepositoryException e) {
                 log.debug("Unable to unregister listener: ", e.getMessage());
             }
@@ -553,8 +654,7 @@
                             // the permission of any of the principals listed in
                             // principalNames.
                             NodeImpl n = (NodeImpl) session.getNode(path);
-                            if (n.isNodeType(NT_REP_ACE) &&
-                                    principalNames.contains(n.getProperty(P_PRINCIPAL_NAME).getString())) {
+                            if (n.isNodeType(NT_REP_ACE)) {
                                 // and reset the readAllowed flag, if the new
                                 // ACE denies READ.
                                 if (readAllowed && n.isNodeType(NT_REP_DENY_ACE)) {
@@ -610,44 +710,159 @@
                 clearCache();
             }
         }
+        
+        private void updatePrincipals(List<String> groups) {
+            if (userId == null) {
+                return;
+            }
+            for (String group : groups) {
+                if (!principalNames.contains(group)) {
+                    principalNames.add(group);
+                }
+            }
+        }
     }
 
     private class Entries {
 
-        private final ListOrderedMap principalNamesToEntries;
+        private final Map<String, List<AccessControlEntry>> principalNamesToEntries;
+        private final List<ComparableAccessControlEntry> orderedAccessControlEntries;
 
-        private Entries(NodeImpl node, Collection principalNames) throws RepositoryException {
+        /**
+         * @param node
+         *            The Access control node from which the entries are to be
+         *            taken.
+         * @param principalNames
+         *            a set of static principal names for the user.
+         * @param userId
+         *            userId is the user the entires are for, or null if none is
+         *            bound.
+         * @throws RepositoryException
+         */
+        private Entries(NodeImpl node, Collection principalNames, String userId, ValueFactory valueFactory) throws RepositoryException {
+            orderedAccessControlEntries = new ArrayList<ComparableAccessControlEntry>();
             principalNamesToEntries = new ListOrderedMap();
             for (Iterator it = principalNames.iterator(); it.hasNext();) {
-                principalNamesToEntries.put(it.next(), new ArrayList());
+                principalNamesToEntries.put((String) it.next(), new ArrayList());
             }
-            collectEntries(node);
+            collectEntries(node, userId, valueFactory);
+            Collections.sort(orderedAccessControlEntries);
+            log.debug("ACL Order for {} is {} ", node.getPath(), orderedAccessControlEntries);
         }
 
-        private void collectEntries(NodeImpl node) throws RepositoryException {
+        /**
+         * @param node
+         *            the acl node
+         * @param userId
+         *            the userId which may be null
+         * @throws RepositoryException
+         */
+        private void collectEntries(NodeImpl node, String userId, ValueFactory valueFactory) throws RepositoryException {
             // if the given node is access-controlled, construct a new ACL and add
             // it to the list
             if (isAccessControlled(node)) {
                 // build acl for the access controlled node
                 NodeImpl aclNode = node.getNode(N_POLICY);
-                ACLTemplate.collectEntries(aclNode, principalNamesToEntries);
+                // get the collector and collect entries
+                getEntryCollector().collectEntries(aclNode, principalNamesToEntries, orderedAccessControlEntries, userId, valueFactory);
             }
             // then, recursively look for access controlled parents up the hierarchy.
             if (!rootNodeId.equals(node.getId())) {
                 NodeImpl parentNode = (NodeImpl) node.getParent();
-                collectEntries(parentNode);
+                collectEntries(parentNode, userId, valueFactory);
             }
         }
 
         private AccessControlEntryIterator iterator() {
-            List entries = new ArrayList();
-            for (Iterator it =
-                    principalNamesToEntries.asList().iterator(); it.hasNext();) {
-                Object key = it.next();
-                entries.addAll((List) principalNamesToEntries.get(key));
-            }
-            return new AccessControlEntryIterator(entries);
+            // Sakai removed to ensure that the Entries are processed in the
+            // correct order.
+            // List<AccessControlEntry> entries = new
+            // ArrayList<AccessControlEntry>();
+            // for (Iterator<?> it = ((ListOrderedMap)
+            // principalNamesToEntries).asList()
+            // .iterator(); it.hasNext();) {
+            // Object key = it.next();
+            // entries.addAll(principalNamesToEntries.get(key));
+            // }
+
+            /*
+             * The order this needs to come out in is by node, then by principal
+             * type, then any order
+             */
+
+            return new AccessControlEntryIterator(orderedAccessControlEntries);
+        }
+    }
+
+    /**
+     * @param string
+     * @param ace
+     * @param allows
+     * @param denies
+     * @param allowPrivileges
+     * @param denyPrivileges
+     * @param parentAllows
+     * @param parentDenies
+     */
+    public static void logState(String message, ACLTemplate.Entry ace, int allows, int denies,
+            int allowPrivileges, int denyPrivileges, int parentAllows, int parentDenies) {
+        if (log.isDebugEnabled()) {
+            StringBuilder sb = new StringBuilder();
+            sb.append("allows(").append(bitToString(allows));
+            sb.append(")denies(").append(bitToString(denies));
+            sb.append(")allowPrivileges(").append(bitToString(allowPrivileges));
+            sb.append(")denyPrivileges(").append(bitToString(denyPrivileges));
+            sb.append(")parentAllows(").append(bitToString(parentAllows));
+            sb.append(")parentDenies(").append(bitToString(parentDenies));
+            sb.append(")").append(ace.toString()).append(",").append(message);
+            log.debug(sb.toString());
+        }
+    }
+
+    // the following are private in privilage registry, so duplicated here
+    private static final int PrivilegeRegistry_READ = 1;
+
+    private static final int PrivilegeRegistry_WRITE = 30;
+
+    private static final int PrivilegeRegistry_MODIFY_PROPERTIES = 2;
+
+    private static final int PrivilegeRegistry_REMOVE_NODE = 16;
+
+    private static final int PrivilegeRegistry_REMOVE_CHILD_NODES = 8;
+
+    /**
+     * @param parentDenies
+     * @return
+     */
+    private static String bitToString(int v) {
+        int i = 1;
+        StringBuilder sb = new StringBuilder();
+        if ((v & PrivilegeRegistry_READ) == 0) {
+            sb.append("-");
+        } else {
+            sb.append("r");
+        }
+        if ((v & PrivilegeRegistry_WRITE) == 0) {
+            sb.append("-");
+        } else {
+            sb.append("w");
+        }
+        if ((v & PrivilegeRegistry_MODIFY_PROPERTIES) == 0) {
+            sb.append("-");
+        } else {
+            sb.append("P");
+        }
+        if ((v & PrivilegeRegistry_REMOVE_NODE) == 0) {
+            sb.append("-");
+        } else {
+            sb.append("R");
+        }
+        if ((v & PrivilegeRegistry_REMOVE_CHILD_NODES) == 0) {
+            sb.append("-");
+        } else {
+            sb.append("C");
         }
+        return sb.toString();
     }
 
 }
diff -u -r /Users/ieb/Apache/jackrabbit/jackrabbit/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLTemplate.java src/main/java/org/apache/sling/jcr/jackrabbit/server/impl/security/standard/ACLTemplate.java
--- /Users/ieb/Apache/jackrabbit/jackrabbit/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLTemplate.java	2009-12-03 06:42:56.000000000 +0000
+++ src/main/java/org/apache/sling/jcr/jackrabbit/server/impl/security/standard/ACLTemplate.java	2009-12-05 16:55:14.000000000 +0000
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.jackrabbit.core.security.authorization.acl;
+package org.apache.sling.jcr.jackrabbit.server.impl.security.standard;
 
 import org.apache.commons.collections.map.ListOrderedMap;
 import org.apache.jackrabbit.api.jsr283.security.AccessControlEntry;
@@ -40,7 +40,6 @@
 import javax.jcr.PropertyType;
 import javax.jcr.ValueFactory;
 import java.security.Principal;
-import java.security.acl.Group;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
@@ -53,7 +52,11 @@
  * modifications applied to this ACL only take effect, if the policy gets
  * {@link org.apache.jackrabbit.api.jsr283.security.AccessControlManager#setPolicy(String, org.apache.jackrabbit.api.jsr283.security.AccessControlPolicy) reapplied}
  * to the <code>AccessControlManager</code> and the changes are saved.
+ * </p><p>
+ * This is a modified version of the ACLTemplate that has the static collectEntries removed and replaced by a EntryCollector. This is the only change.
+ * </p>
  */
+// PLEASE DO NOT REFORMAT THIS CODE IF YOU DO THIS LINE WILL WRAP AND IT WILL MAKE FUTURE PATCHING VERY HARD, THANKS
 class ACLTemplate implements JackrabbitAccessControlList {
 
     private static final Logger log = LoggerFactory.getLogger(ACLTemplate.class);
@@ -158,58 +161,6 @@
         }
     }
 
-    /**
-     * Separately collect the entries defined for the principals with the
-     * specified names and return a map consisting of principal name key
-     * and a list of ACEs as value.
-     *
-     * @param aclNode
-     * @param princToEntries Map of key = principalName and value = ArrayList
-     * to be filled with ACEs matching the principal names.
-     * @throws RepositoryException
-     */
-    static void collectEntries(NodeImpl aclNode, Map princToEntries)
-            throws RepositoryException {
-        SessionImpl sImpl = (SessionImpl) aclNode.getSession();
-        PrincipalManager principalMgr = sImpl.getPrincipalManager();
-        AccessControlManager acMgr = sImpl.getAccessControlManager();
-
-        NodeIterator itr = aclNode.getNodes();
-        while (itr.hasNext()) {
-            NodeImpl aceNode = (NodeImpl) itr.nextNode();
-            String principalName = aceNode.getProperty(AccessControlConstants.P_PRINCIPAL_NAME).getString();
-            // only process aceNode if 'principalName' is contained in the given set
-            if (princToEntries.containsKey(principalName)) {
-                Principal princ = null;
-                if (principalMgr.hasPrincipal(principalName)) {
-                    try {
-                        princ = principalMgr.getPrincipal(principalName);
-                    } catch (NoSuchPrincipalException e) {
-                        // should not get here
-                    }
-                }
-                if (princ == null) {
-                    log.warn("Principal with name " + principalName + " unknown to PrincipalManager.");
-                    princ = new PrincipalImpl(principalName);
-                }
-
-                Value[] privValues = aceNode.getProperty(AccessControlConstants.P_PRIVILEGES).getValues();
-                Privilege[] privs = new Privilege[privValues.length];
-                for (int i = 0; i < privValues.length; i++) {
-                    privs[i] = acMgr.privilegeFromName(privValues[i].getString());
-                }
-                // create a new ACEImpl (omitting validation check)
-                Entry ace = new Entry(
-                        princ,
-                        privs,
-                        aceNode.isNodeType(AccessControlConstants.NT_REP_GRANT_ACE),
-                        sImpl.getValueFactory());
-                // add it to the proper list (e.g. separated by principals)
-                ((List) princToEntries.get(principalName)).add(ace);
-            }
-        }
-    }
-
     private List internalGetEntries() {
         List l = new ArrayList();
         for (Iterator it = entries.values().iterator(); it.hasNext();) {
@@ -300,10 +251,14 @@
         if (!principalMgr.hasPrincipal(principal.getName())) {
             throw new AccessControlException("Principal " + principal.getName() + " does not exist.");
         }
-        // additional validation: a group may not have 'denied' permissions
-        if (!isAllow && principal instanceof Group) {
-            throw new AccessControlException("For group principals permissions can only be added but not denied.");
-        }
+//        // additional validation: a group may not have 'denied' permissions
+//
+// Allow Group Denies for Sakai
+//         if (!isAllow && principal instanceof Group) {
+//
+//           throw new AccessControlException("For group principals permissions can only be added but not denied.");
+//       }
+//
     }
 
     //--------------------------------------------------< AccessControlList >---
@@ -446,4 +401,79 @@
             super(principal, privileges, allow, Collections.EMPTY_MAP, valueFactory);
         }
     }
+    
+    static class ComparableEntry extends Entry implements ComparableAccessControlEntry {
+
+      private String path;
+      private boolean isGroup;
+      private Principal principal;
+
+      ComparableEntry(String path, boolean isGroup, Principal principal, Privilege[] privileges, boolean allow, ValueFactory valueFactory) throws AccessControlException {
+          super(principal, privileges, allow, valueFactory);
+          this.principal = principal;
+          this.path = path;
+          this.isGroup = isGroup;
+      }
+
+      /**
+       * Ordering is set to make nodes take preference over group or user.
+       * {@inheritDoc}
+       * @see java.lang.Comparable#compareTo(java.lang.Object)
+       */
+      public int compareTo(ComparableAccessControlEntry o) {
+        boolean pathSorted = false;
+        if ( pathSorted ) {
+        int i =  o.getPath().length()-path.length();
+        if (i == 0 ) {
+          if ( isGroup && o.isGroup() ) {
+            return 0;
+          } else if ( !isGroup && !o.isGroup() ) {
+            return 0;
+          } else if ( isGroup ) {
+            return 1;
+          } else {
+            return -1;
+          }
+        }
+        return i;
+        } else {
+          if ( isGroup && o.isGroup() ) {
+            return  o.getPath().length()-path.length();
+          } else if ( !isGroup && !o.isGroup() ) {
+            return  o.getPath().length()-path.length();
+          } else if ( isGroup ) {
+            return 1;
+          } else {
+            return -1;
+          }
+          
+        }
+      }
+      
+      /**
+      * {@inheritDoc}
+      * @see org.apache.sling.jcr.jackrabbit.server.impl.security.standard.ComparableAccessControlEntry#getPath()
+      */
+      public String getPath() {
+        return path;
+      }
+      /**
+      * {@inheritDoc}
+      * @see org.apache.sling.jcr.jackrabbit.server.impl.security.standard.ComparableAccessControlEntry#isGroup()
+      */
+      public boolean isGroup() {
+        return isGroup;
+      }
+      
+      /**
+       * {@inheritDoc}
+       * @see java.lang.Object#toString()
+       */
+      @Override
+      public String toString() {
+        return "["+path+"]["+isGroup+"]["+principal.getName()+"]";
+      }
+      
+  }
+
 }
