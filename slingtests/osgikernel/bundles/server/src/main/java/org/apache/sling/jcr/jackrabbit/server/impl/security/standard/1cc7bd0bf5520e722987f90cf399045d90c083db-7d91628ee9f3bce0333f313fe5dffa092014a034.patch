diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLEditor.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLEditor.java
index 0118009..6e1eb31 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLEditor.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLEditor.java
@@ -22,13 +22,15 @@ import org.apache.jackrabbit.api.jsr283.security.AccessControlEntry;
 import org.apache.jackrabbit.api.jsr283.security.AccessControlPolicy;
 import org.apache.jackrabbit.api.jsr283.security.AccessControlList;
 import org.apache.jackrabbit.core.NodeImpl;
-import org.apache.jackrabbit.core.SecurityItemModifier;
+import org.apache.jackrabbit.core.ProtectedItemModifier;
 import org.apache.jackrabbit.core.SessionImpl;
 import org.apache.jackrabbit.core.security.authorization.AccessControlConstants;
 import org.apache.jackrabbit.core.security.authorization.AccessControlEditor;
 import org.apache.jackrabbit.core.security.authorization.AccessControlUtils;
 import org.apache.jackrabbit.core.security.authorization.JackrabbitAccessControlEntry;
 import org.apache.jackrabbit.core.security.authorization.PrivilegeRegistry;
+import org.apache.jackrabbit.core.security.authorization.Permission;
+import org.apache.jackrabbit.core.security.authorization.JackrabbitAccessControlPolicy;
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.commons.conversion.NameException;
 import org.apache.jackrabbit.spi.commons.conversion.NameParser;
@@ -42,12 +44,14 @@ import javax.jcr.RepositoryException;
 import javax.jcr.Session;
 import javax.jcr.Value;
 import javax.jcr.ValueFactory;
+import javax.jcr.PropertyType;
+import javax.jcr.ValueFormatException;
 import java.security.Principal;
 
 /**
  * <code>ACLEditor</code>...
  */
-public class ACLEditor extends SecurityItemModifier implements AccessControlEditor, AccessControlConstants {
+public class ACLEditor extends ProtectedItemModifier implements AccessControlEditor, AccessControlConstants {
 
     /**
      * the default logger
@@ -65,6 +69,7 @@ public class ACLEditor extends SecurityItemModifier implements AccessControlEdit
     private final AccessControlUtils utils;
 
     ACLEditor(Session editingSession, AccessControlUtils utils) {
+        super(Permission.MODIFY_AC);
         if (editingSession instanceof SessionImpl) {
             session = ((SessionImpl) editingSession);
             // TODO: review and find better solution
@@ -108,26 +113,30 @@ public class ACLEditor extends SecurityItemModifier implements AccessControlEdit
     public AccessControlPolicy[] editAccessControlPolicies(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException {
         checkProtectsNode(nodePath);
 
-        AccessControlPolicy acl;
-        NodeImpl aclNode = getAclNode(nodePath);
+        AccessControlPolicy acl = null;
+        NodeImpl controlledNode = getNode(nodePath);
+        NodeImpl aclNode = getAclNode(controlledNode);
         if (aclNode == null) {
-            // create an empty acl
-            acl = new ACLTemplate(nodePath, session.getPrincipalManager(), privilegeRegistry);
-        } else {
-            acl = getACL(aclNode);
-        }
-        return new AccessControlPolicy[] {acl};
+            // create an empty acl unless the node is protected or cannot have
+            // rep:AccessControllable mixin set (e.g. due to a lock)
+            String mixin = session.getJCRName(NT_REP_ACCESS_CONTROLLABLE);
+            if (controlledNode.isNodeType(mixin) || controlledNode.canAddMixin(mixin)) {
+                acl = new ACLTemplate(nodePath, session.getPrincipalManager(),
+                        privilegeRegistry, session.getValueFactory());
+            }
+        } // else: acl already present -> getPolicies must be used.
+        return (acl != null) ? new AccessControlPolicy[] {acl} : new AccessControlPolicy[0];
     }
 
     /**
      * @see AccessControlEditor#editAccessControlPolicies(Principal)
      */
-    public AccessControlPolicy[] editAccessControlPolicies(Principal principal) throws AccessDeniedException, AccessControlException, RepositoryException {
+    public JackrabbitAccessControlPolicy[] editAccessControlPolicies(Principal principal) throws AccessDeniedException, AccessControlException, RepositoryException {
         if (!session.getPrincipalManager().hasPrincipal(principal.getName())) {
             throw new AccessControlException("Unknown principal.");
         }
         // TODO: impl. missing
-        return new AccessControlPolicy[0];
+        return new JackrabbitAccessControlPolicy[0];
     }
 
     /**
@@ -144,7 +153,7 @@ public class ACLEditor extends SecurityItemModifier implements AccessControlEdit
            access and removed the explicitely
          */
         if (aclNode != null) {
-            removeSecurityItem(aclNode);
+            removeItem(aclNode);
         }
         // now (re) create it
         aclNode = createAclNode(nodePath);
@@ -158,16 +167,16 @@ public class ACLEditor extends SecurityItemModifier implements AccessControlEdit
             ValueFactory vf = session.getValueFactory();
 
             // create the ACE node
-            NodeImpl aceNode = addSecurityNode(aclNode, nodeName, ntName);
+            NodeImpl aceNode = addNode(aclNode, nodeName, ntName);
 
             // write the rep:principalName property
             String principalName = ace.getPrincipal().getName();
-            setSecurityProperty(aceNode, P_PRINCIPAL_NAME, vf.createValue(principalName));
+            setProperty(aceNode, P_PRINCIPAL_NAME, vf.createValue(principalName));
 
             // ... and the rep:privileges property
             Privilege[] pvlgs = ace.getPrivileges();
             Value[] names = getPrivilegeNames(pvlgs, vf);
-            setSecurityProperty(aceNode, P_PRIVILEGES, names);
+            setProperty(aceNode, P_PRIVILEGES, names);
         }
     }
 
@@ -180,7 +189,7 @@ public class ACLEditor extends SecurityItemModifier implements AccessControlEdit
 
         NodeImpl aclNode = getAclNode(nodePath);
         if (aclNode != null) {
-            removeSecurityItem(aclNode);
+            removeItem(aclNode);
         } else {
             throw new AccessControlException("No policy to remove at " + nodePath);
         }
@@ -233,8 +242,8 @@ public class ACLEditor extends SecurityItemModifier implements AccessControlEdit
     }
 
     /**
-     * Returns the rep:Policy node below the Node identified by the given
-     * id or <code>null</code> if the node is not mix:AccessControllable
+     * Returns the rep:Policy node below the Node identified at the given
+     * path or <code>null</code> if the node is not mix:AccessControllable
      * or if no policy node exists.
      *
      * @param nodePath
@@ -243,10 +252,22 @@ public class ACLEditor extends SecurityItemModifier implements AccessControlEdit
      * @throws RepositoryException
      */
     private NodeImpl getAclNode(String nodePath) throws PathNotFoundException, RepositoryException {
+        NodeImpl controlledNode = getNode(nodePath);
+        return getAclNode(controlledNode);
+    }
+
+    /**
+     * Returns the rep:Policy node below the given Node or <code>null</code>
+     * if the node is not mix:AccessControllable or if no policy node exists.
+     *
+     * @param controlledNode
+     * @return node or <code>null</code>
+     * @throws RepositoryException
+     */
+    private NodeImpl getAclNode(NodeImpl controlledNode) throws RepositoryException {
         NodeImpl aclNode = null;
-        NodeImpl protectedNode = getNode(nodePath);
-        if (ACLProvider.isAccessControlled(protectedNode)) {
-            aclNode = protectedNode.getNode(N_POLICY);
+        if (ACLProvider.isAccessControlled(controlledNode)) {
+            aclNode = controlledNode.getNode(N_POLICY);
         }
         return aclNode;
     }
@@ -262,7 +283,7 @@ public class ACLEditor extends SecurityItemModifier implements AccessControlEdit
         if (!protectedNode.isNodeType(NT_REP_ACCESS_CONTROLLABLE)) {
             protectedNode.addMixin(NT_REP_ACCESS_CONTROLLABLE);
         }
-        return addSecurityNode(protectedNode, N_POLICY, NT_REP_ACL);
+        return addNode(protectedNode, N_POLICY, NT_REP_ACL);
     }
 
     /**
@@ -300,11 +321,12 @@ public class ACLEditor extends SecurityItemModifier implements AccessControlEdit
      * @param privileges
      * @param valueFactory
      * @return an array of Value.
+     * @throws javax.jcr.ValueFormatException
      */
-    private static Value[] getPrivilegeNames(Privilege[] privileges, ValueFactory valueFactory) {
+    private static Value[] getPrivilegeNames(Privilege[] privileges, ValueFactory valueFactory) throws ValueFormatException {
         Value[] names = new Value[privileges.length];
         for (int i = 0; i < privileges.length; i++) {
-            names[i] = valueFactory.createValue(privileges[i].getName());
+            names[i] = valueFactory.createValue(privileges[i].getName(), PropertyType.NAME);
         }
         return names;
     }
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLProvider.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLProvider.java
index 666c415..5bccf9b 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLProvider.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLProvider.java
@@ -38,7 +38,6 @@ import org.apache.jackrabbit.core.security.authorization.Permission;
 import org.apache.jackrabbit.core.security.authorization.PrivilegeRegistry;
 import org.apache.jackrabbit.core.security.authorization.UnmodifiableAccessControlList;
 import org.apache.jackrabbit.core.security.authorization.AccessControlEntryIterator;
-import org.apache.jackrabbit.core.security.authorization.JackrabbitAccessControlEntry;
 import org.apache.jackrabbit.core.security.principal.PrincipalImpl;
 import org.apache.jackrabbit.spi.Path;
 import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
@@ -269,11 +268,12 @@ public class ACLProvider extends AbstractAccessControlProvider implements Access
      * </ul>
      *
      * @param session to the workspace to set-up inital ACL to
-     * @throws RepositoryException
+     * @param editor for the specified session.
+     * @throws RepositoryException If an error occurs.
      */
     private static void initRootACL(SessionImpl session, AccessControlEditor editor) throws RepositoryException {
         try {
-            log.info("Install initial ACL:...");
+            log.debug("Install initial ACL:...");
             String rootPath = session.getRootNode().getPath();
             AccessControlPolicy[] acls = editor.editAccessControlPolicies(rootPath);
             ACLTemplate acl = (ACLTemplate) acls[0];
@@ -281,7 +281,7 @@ public class ACLProvider extends AbstractAccessControlProvider implements Access
             PrincipalManager pMgr = session.getPrincipalManager();
             AccessControlManager acMgr = session.getAccessControlManager();
 
-            log.info("... Privilege.ALL for administrators.");
+            log.debug("... Privilege.ALL for administrators.");
             Principal administrators;
             String pName = SecurityConstants.ADMINISTRATORS_NAME;
             if (pMgr.hasPrincipal(pName)) {
@@ -294,18 +294,16 @@ public class ACLProvider extends AbstractAccessControlProvider implements Access
             acl.addAccessControlEntry(administrators, privs);
 
             Principal everyone = pMgr.getEveryone();
-            log.info("... Privilege.READ for everyone.");
+            log.debug("... Privilege.READ for everyone.");
             privs = new Privilege[]{acMgr.privilegeFromName(Privilege.JCR_READ)};
             acl.addAccessControlEntry(everyone, privs);
 
             editor.setPolicy(rootPath, acl);
             session.save();
-            log.info("... done.");
 
         } catch (RepositoryException e) {
             log.error("Failed to set-up minimal access control for root node of workspace " + session.getWorkspace().getName());
             session.getRootNode().refresh(false);
-            throw e;
         }
     }
 
@@ -480,8 +478,8 @@ public class ACLProvider extends AbstractAccessControlProvider implements Access
             int parentAllows = PrivilegeRegistry.NO_PRIVILEGE;
             int parentDenies = PrivilegeRegistry.NO_PRIVILEGE;
 
-            while (entries.hasNext() && allows != PrivilegeRegistry.ALL) {
-                JackrabbitAccessControlEntry ace = (JackrabbitAccessControlEntry) entries.next();
+            while (entries.hasNext() && allows != privAll) {
+                ACLTemplate.Entry ace = (ACLTemplate.Entry) entries.next();
                 // Determine if the ACE is defined on the node at absPath (locally):
                 // Except for READ-privileges the permissions must be determined
                 // from privileges defined for the parent. Consequently aces
@@ -497,11 +495,11 @@ public class ACLProvider extends AbstractAccessControlProvider implements Access
                 }
                 if (ace.isAllow()) {
                     allowPrivileges |= Permission.diff(entryBits, denyPrivileges);
-                    int permissions = Permission.calculatePermissions(allowPrivileges, parentAllows, true, isAcItem);
+                    int permissions = PrivilegeRegistry.calculatePermissions(allowPrivileges, parentAllows, true, isAcItem);
                     allows |= Permission.diff(permissions, denies);
                 } else {
                     denyPrivileges |= Permission.diff(entryBits, allowPrivileges);
-                    int permissions = Permission.calculatePermissions(denyPrivileges, parentDenies, false, isAcItem);
+                    int permissions = PrivilegeRegistry.calculatePermissions(denyPrivileges, parentDenies, false, isAcItem);
                     denies |= Permission.diff(permissions, allows);
                 }
             }
diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLTemplate.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLTemplate.java
index 28041c8..8269bca 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLTemplate.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLTemplate.java
@@ -22,6 +22,7 @@ import org.apache.jackrabbit.api.jsr283.security.AccessControlException;
 import org.apache.jackrabbit.api.jsr283.security.Privilege;
 import org.apache.jackrabbit.api.jsr283.security.AccessControlManager;
 import org.apache.jackrabbit.api.security.principal.PrincipalManager;
+import org.apache.jackrabbit.api.security.principal.NoSuchPrincipalException;
 import org.apache.jackrabbit.core.NodeImpl;
 import org.apache.jackrabbit.core.SessionImpl;
 import org.apache.jackrabbit.core.security.authorization.AccessControlConstants;
@@ -29,10 +30,15 @@ import org.apache.jackrabbit.core.security.authorization.AccessControlEntryImpl;
 import org.apache.jackrabbit.core.security.authorization.JackrabbitAccessControlList;
 import org.apache.jackrabbit.core.security.authorization.PrivilegeRegistry;
 import org.apache.jackrabbit.core.security.authorization.Permission;
+import org.apache.jackrabbit.core.security.principal.PrincipalImpl;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import javax.jcr.NodeIterator;
 import javax.jcr.RepositoryException;
 import javax.jcr.Value;
+import javax.jcr.PropertyType;
+import javax.jcr.ValueFactory;
 import java.security.Principal;
 import java.security.acl.Group;
 import java.util.ArrayList;
@@ -50,6 +56,8 @@ import java.util.Map;
  */
 class ACLTemplate implements JackrabbitAccessControlList {
 
+    private static final Logger log = LoggerFactory.getLogger(ACLTemplate.class);
+
     /**
      * Path of the node this ACL template has been created for.
      */
@@ -73,29 +81,42 @@ class ACLTemplate implements JackrabbitAccessControlList {
     private final PrivilegeRegistry privilegeRegistry;
 
     /**
+     * The value factory
+     */
+    private final ValueFactory valueFactory;
+
+    /**
      * Construct a new empty {@link ACLTemplate}.
      *
      * @param path
+     * @param privilegeRegistry
      * @param principalMgr
      */
-    ACLTemplate(String path, PrincipalManager principalMgr, PrivilegeRegistry privilegeRegistry) {
+    ACLTemplate(String path, PrincipalManager principalMgr, 
+                PrivilegeRegistry privilegeRegistry, ValueFactory valueFactory) {
         this.path = path;
         this.principalMgr = principalMgr;
         this.privilegeRegistry = privilegeRegistry;
+        this.valueFactory = valueFactory;
     }
 
     /**
      * Create a {@link ACLTemplate} that is used to edit an existing ACL
      * node.
+     *
+     * @param aclNode
+     * @param privilegeRegistry
+     * @throws RepositoryException
      */
     ACLTemplate(NodeImpl aclNode, PrivilegeRegistry privilegeRegistry) throws RepositoryException {
         if (aclNode == null || !aclNode.isNodeType(AccessControlConstants.NT_REP_ACL)) {
-            throw new IllegalArgumentException("Node must be of type: " +
-                    AccessControlConstants.NT_REP_ACL);
+            throw new IllegalArgumentException("Node must be of type 'rep:ACL'");
         }
         SessionImpl sImpl = (SessionImpl) aclNode.getSession();
         path = aclNode.getParent().getPath();
         principalMgr = sImpl.getPrincipalManager();
+        valueFactory = sImpl.getValueFactory();
+        
         this.privilegeRegistry = privilegeRegistry;
 
         // load the entries:
@@ -103,22 +124,37 @@ class ACLTemplate implements JackrabbitAccessControlList {
         NodeIterator itr = aclNode.getNodes();
         while (itr.hasNext()) {
             NodeImpl aceNode = (NodeImpl) itr.nextNode();
+            try {
+                String principalName = aceNode.getProperty(AccessControlConstants.P_PRINCIPAL_NAME).getString();
+                Principal princ = null;
+                if (principalMgr.hasPrincipal(principalName)) {
+                    try {
+                        princ = principalMgr.getPrincipal(principalName);
+                    } catch (NoSuchPrincipalException e) {
+                        // should not get here.
+                    }
+                }
+                if (princ == null) {
+                    log.debug("Principal with name " + principalName + " unknown to PrincipalManager.");
+                    princ = new PrincipalImpl(principalName);
+                }
 
-            String principalName = aceNode.getProperty(AccessControlConstants.P_PRINCIPAL_NAME).getString();
-            Principal princ = principalMgr.getPrincipal(principalName);
-
-            Value[] privValues = aceNode.getProperty(AccessControlConstants.P_PRIVILEGES).getValues();
-            Privilege[] privs = new Privilege[privValues.length];
-            for (int i = 0; i < privValues.length; i++) {
-                privs[i] = acMgr.privilegeFromName(privValues[i].getString());
+                Value[] privValues = aceNode.getProperty(AccessControlConstants.P_PRIVILEGES).getValues();
+                Privilege[] privs = new Privilege[privValues.length];
+                for (int i = 0; i < privValues.length; i++) {
+                    privs[i] = acMgr.privilegeFromName(privValues[i].getString());
+                }
+                // create a new ACEImpl (omitting validation check)
+                Entry ace = new Entry(
+                        princ,
+                        privs,
+                        aceNode.isNodeType(AccessControlConstants.NT_REP_GRANT_ACE),
+                        valueFactory);
+                // add the entry
+                internalAdd(ace);
+            } catch (RepositoryException e) {
+                log.debug("Failed to build ACE from content.", e.getMessage());
             }
-            // create a new ACEImpl (omitting validation check)
-            Entry ace = new Entry(
-                    princ,
-                    privs,
-                    aceNode.isNodeType(AccessControlConstants.NT_REP_GRANT_ACE));
-            // add the entry
-            internalAdd(ace);
         }
     }
 
@@ -144,7 +180,18 @@ class ACLTemplate implements JackrabbitAccessControlList {
             String principalName = aceNode.getProperty(AccessControlConstants.P_PRINCIPAL_NAME).getString();
             // only process aceNode if 'principalName' is contained in the given set
             if (princToEntries.containsKey(principalName)) {
-                Principal princ = principalMgr.getPrincipal(principalName);
+                Principal princ = null;
+                if (principalMgr.hasPrincipal(principalName)) {
+                    try {
+                        princ = principalMgr.getPrincipal(principalName);
+                    } catch (NoSuchPrincipalException e) {
+                        // should not get here
+                    }
+                }
+                if (princ == null) {
+                    log.warn("Principal with name " + principalName + " unknown to PrincipalManager.");
+                    princ = new PrincipalImpl(principalName);
+                }
 
                 Value[] privValues = aceNode.getProperty(AccessControlConstants.P_PRIVILEGES).getValues();
                 Privilege[] privs = new Privilege[privValues.length];
@@ -155,7 +202,8 @@ class ACLTemplate implements JackrabbitAccessControlList {
                 Entry ace = new Entry(
                         princ,
                         privs,
-                        aceNode.isNodeType(AccessControlConstants.NT_REP_GRANT_ACE));
+                        aceNode.isNodeType(AccessControlConstants.NT_REP_GRANT_ACE),
+                        sImpl.getValueFactory());
                 // add it to the proper list (e.g. separated by principals)
                 ((List) princToEntries.get(principalName)).add(ace);
             }
@@ -210,7 +258,7 @@ class ACLTemplate implements JackrabbitAccessControlList {
                     int mergedBits = entries[i].getPrivilegeBits() | entry.getPrivilegeBits();
                     Privilege[] mergedPrivs = privilegeRegistry.getPrivileges(mergedBits);
                     // omit validation check.
-                    entry = new Entry(entry.getPrincipal(), mergedPrivs, entry.isAllow());
+                    entry = new Entry(entry.getPrincipal(), mergedPrivs, entry.isAllow(), valueFactory);
                 } else {
                     complementEntry = entries[i];
                 }
@@ -229,7 +277,7 @@ class ACLTemplate implements JackrabbitAccessControlList {
                     // omit validation check
                     Entry tmpl = new Entry(entry.getPrincipal(),
                             privilegeRegistry.getPrivileges(resultPrivs),
-                            !entry.isAllow());
+                            !entry.isAllow(), valueFactory);
                     l.add(tmpl);
                 } /* else: does not need to be modified.*/
             }
@@ -302,6 +350,25 @@ class ACLTemplate implements JackrabbitAccessControlList {
     }
 
     /**
+     * Returns an empty String array.
+     *
+     * @see JackrabbitAccessControlList#getRestrictionType(String)
+     */
+    public String[] getRestrictionNames() {
+        return new String[0];
+    }
+
+    /**
+     * Always returns {@link PropertyType#UNDEFINED} as no restrictions are
+     * supported.
+     *
+     * @see JackrabbitAccessControlList#getRestrictionType(String)
+     */
+    public int getRestrictionType(String restrictionName) {
+        return PropertyType.UNDEFINED;
+    }
+
+    /**
      * @see JackrabbitAccessControlList#isEmpty()
      */
     public boolean isEmpty() {
@@ -334,7 +401,7 @@ class ACLTemplate implements JackrabbitAccessControlList {
         }
 
         checkValidEntry(principal, privileges, isAllow);
-        Entry ace = new Entry(principal, privileges, isAllow);
+        Entry ace = new Entry(principal, privileges, isAllow, valueFactory);
         return internalAdd(ace);
     }
 
@@ -353,7 +420,7 @@ class ACLTemplate implements JackrabbitAccessControlList {
     /**
      * Returns true if the path and the entries are equal; false otherwise.
      *
-     * @param obj
+     * @param obj Object to be tested.
      * @return true if the path and the entries are equal; false otherwise.
      * @see Object#equals(Object)
      */
@@ -375,8 +442,8 @@ class ACLTemplate implements JackrabbitAccessControlList {
      */
     static class Entry extends AccessControlEntryImpl {
 
-        Entry(Principal principal, Privilege[] privileges, boolean allow) throws AccessControlException {
-            super(principal, privileges, allow, Collections.EMPTY_MAP);
+        Entry(Principal principal, Privilege[] privileges, boolean allow, ValueFactory valueFactory) throws AccessControlException {
+            super(principal, privileges, allow, Collections.EMPTY_MAP, valueFactory);
         }
     }
 }
